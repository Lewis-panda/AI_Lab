# -*- coding: utf-8 -*-
"""AIcourse_Lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HxSRv8ir_YcUlMPLIniXCobp9Ax-30o2
"""

from keras.datasets import mnist
from keras.utils import np_utils
import numpy as np
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
np.random.seed(10)

if __name__ == '__main__':
    #load data
    (x_train_image,y_train_label),(x_test_image,y_test_label) = mnist.load_data()
    
    #reshape
    x_train_imre = x_train_image.reshape(x_train_image.shape[0], x_train_image.shape[1]*x_train_image.shape[2]).astype('float32')
    x_test_imre = x_test_image.reshape(x_test_image.shape[0], x_test_image.shape[1]*x_test_image.shape[2]).astype('float32')
    
    #normalize
    x_train_normalize = x_train_imre/255
    x_test_normalize = x_test_imre/255
    
    #one hot
    y_TrainOneHot = np_utils.to_categorical(y_train_label)
    y_TestOneHot = np_utils.to_categorical(y_test_label)
    
    #%% 加分 畫train data的圖
    fig, axs = plt.subplots(nrows=2, ncols=5, figsize=(12,6))
    axs = axs.flatten()
    for i in range(10):
        axs[i].imshow(x_train_image[y_train_label == i][0], cmap='gray')
        axs[i].set_title(f"Number: {i}")
        axs[i].axis('off')
    plt.tight_layout()
    plt.show()
    
    
    #%%
    #build model
    inputs = keras.Input(shape = 784)
    x = keras.layers.Dense(units=512, activation='relu')(inputs)
    x = keras.layers.Dense(units=256, activation='relu')(x)
    x = keras.layers.Dense(units=128, activation='relu')(x)
    x = keras.layers.Dense(units=64, activation='relu')(x)
    outputs = keras.layers.Dense(units=10, activation='softmax')(x)
    model = keras.Model(inputs=inputs, outputs=outputs)
    model.summary()
    
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    
    
    #start training
    train_history = model.fit(x=x_train_normalize, y=y_TrainOneHot, validation_split=0.2, epochs=10, batch_size=200, verbose=2)
    
    def show_train_history(train_history, train, validation):
        plt.plot(train_history.history[train])
        plt.plot(train_history.history[validation])
        plt.title('train history')
        plt.ylabel(train)
        plt.xlabel('Epoch')
        plt.legend(['train', 'validation'], loc='upper left')
        plt.show()
    show_train_history(train_history, 'accuracy', 'val_accuracy')
    show_train_history(train_history, 'loss', 'val_loss')
    
    scores = model.evaluate(x_test_normalize, y_TestOneHot)
    print('test loss, test accuracy=', scores)

    # predict test data labels
    y_pred = model.predict(x_test_normalize)
    y_pred_label = np.argmax(y_pred, axis=1)
    
    # confusion matrix
    cm = confusion_matrix(y_test_label, y_pred_label)
    print(cm)
    plt.imshow(cm, cmap=plt.cm.Blues)
    plt.title('Confusion Matrix')
    plt.colorbar()
    plt.xlabel('Predicted Label')
    plt.ylabel('True Label')
    plt.show()

